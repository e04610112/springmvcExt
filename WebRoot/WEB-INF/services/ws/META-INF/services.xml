<?xml version="1.0" encoding="UTF-8"?>
<serviceGroup>
<service name="SpringWsService">
        <description>Multy Method Invoke With Parameters For SpringMvc</description>
        <schema schemaNamespace="http://192.168.36.149/services" />
<!-- 
      SpringBeanName固定的不能改
      springWsServerService是spring中注册的实现类得id
 -->
   <parameter name="SpringBeanName">springWsServerService</parameter>
<!-- 通过ServiceObjectSupplier参数指定SpringServletContextObjectSupplier类来获得Spring的ApplicationContext对象 -->
   <parameter name="ServiceObjectSupplier">
       org.apache.axis2.extensions.spring.receivers.SpringServletContextObjectSupplier
   </parameter>     
   <!-- 
   在这里最值得注意的是<messageReceivers>元素，该元素用于设置处理WebService方法的处理器。
   例如， getXmlData方法有一个返回值，因此，需要使用可处理输入输出的RPCMessageReceiver类，
   而update方法没有返回值，因此，需要使用只能处理输入的RPCInOnlyMessageReceiver类。
    -->
        <operation name="getXmlData">
           <messageReceiver class="org.apache.axis2.rpc.receivers.RPCMessageReceiver" />
        </operation>
</service>
<service name="SpringAnotherWsService">
    <!-- 
      SpringBeanName固定的不能改
       springAnotherWsServerService是spring中注册的实现类得id
    -->
   <parameter name="SpringBeanName">springAnotherWsServerService</parameter>
<!-- 通过ServiceObjectSupplier参数指定SpringServletContextObjectSupplier类来获得Spring的ApplicationContext对象 -->
   <parameter name="ServiceObjectSupplier">
       org.apache.axis2.extensions.spring.receivers.SpringServletContextObjectSupplier
   </parameter>
   <!-- 
   在这里最值得注意的是<messageReceivers>元素，该元素用于设置处理WebService方法的处理器。
   例如，getAnotherXmlData方法有一个返回值，因此，需要使用可处理输入输出的RPCMessageReceiver类，
   而update方法没有返回值，因此，需要使用只能处理输入的RPCInOnlyMessageReceiver类。
    -->
        <operation name="getAnotherXmlData">
           <messageReceiver class="org.apache.axis2.rpc.receivers.RPCMessageReceiver" />
        </operation>
</service>
</serviceGroup>
