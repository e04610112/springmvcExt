<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
             http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
             http://www.springframework.org/schema/context    
             http://www.springframework.org/schema/context/spring-context-3.0.xsd   
             http://www.springframework.org/schema/aop    
             http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   
             http://www.springframework.org/schema/tx    
             http://www.springframework.org/schema/tx/spring-tx-3.0.xsd   
             http://www.springframework.org/schema/mvc    
             http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd   
             http://www.springframework.org/schema/context    
             http://www.springframework.org/schema/context/spring-context-3.0.xsd" >

	<mvc:annotation-driven />
<!--	  <aop:aspectj-autoproxy proxy-target-class="true"/>-->
	<!-- 自动扫描所有注解该路径 -->
<!--	<context:component-scan base-package="com.framework" />-->
	<!-- 自动扫描所有注解该路径 use-default-filters 默认为true 加载所有，
	因为在spring-common.xml已经加载了除control外的全部，这里只需要加载control
	再有aop事务配置在common中，如果这里也是加载全部，那么导致service，dao重新加载覆盖问题，导致事务失效
	-->
	<context:component-scan base-package="com.framework" use-default-filters="false" >
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<context:annotation-config />
    
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="10240000"/>     
    </bean>
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 --> 
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
	<!-- 对某些静态资源，如css,图片等进行过滤 ,有引用 "/resources/**" 的路径引用转到工程的/resources/目录取资源 -->
	<!-- <mvc:resources mapping="/favicon.ico" location="/favicon.ico"/> -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<!-- 
		异常处理：
		SpringMVC 提供的异常处理主要有两种方式，
		一种是直接实现自己的HandlerExceptionResolver，
		另一种是使用注解的方式实现一个专门用于处理异常的Controller——ExceptionHandler。
		后者代码侵入性强需要在公共的Controller写异常处理代码，推荐HandlerExceptionResolver方式
	 -->
	<bean id="exceptionResolver" class="com.framework.base.exception.ExceptionResolver"></bean>
    <!-- 视图解析 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	<!-- 针对类、方法级别的权限拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<!-- <mvc:mapping path="/fileupload" /> -->
			<mvc:mapping path="/main*" />
			<mvc:mapping path="/header*" />
			<mvc:mapping path="/welcome*" />
			<mvc:mapping path="/treeMenu*" />
			<mvc:mapping path="/role**/**" />
			<mvc:mapping path="/user**/**" />
			<mvc:mapping path="/module**/**" />
			<mvc:mapping path="/field**/**" />
			<bean class="com.framework.base.interceptor.LoginInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	<!--	<mvc:default-servlet-handler/>-->
	
<!--	<mvc:resources mapping="/img/**" location="/img/" /> -->
<!--	<mvc:resources mapping="/js/**" location="/js/" />-->
<!--	<mvc:resources mapping="/css/**" location="/css/" />-->
	
	
	<!-- 数据源配置 -->
	<!-- 
	<bean id="dataSource"
		class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName"
			value="java:comp/env/jdbc/eht_jndi" />
		<property name="lookupOnStartup" value="false" />
		<property name="cache" value="true" />
		<property name="proxyInterface" value="javax.sql.DataSource" />
	</bean>
	-->
	
<!--   <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
<!--      <property name="locations">  -->
<!--           <list>  -->
<!--              <value>classpath:/com/framework/config/jdbc.properties</value>  -->
<!--         </list>  -->
<!--      </property>  -->
<!--   </bean>-->
<!--   -->
<!--   <bean id="dataSource" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource" >-->
<!--        <property name="driverClassName">-->
<!--            <value>${database.jdbc.driverClassName}</value>-->
<!--        </property>-->
<!--        <property name="url" >-->
<!--            <value>${database.jdbc.url}</value>-->
<!--        </property>-->
<!--        <property name="username" >-->
<!--            <value>${database.jdbc.username}</value>-->
<!--        </property>-->
<!--        <property name="password" >-->
<!--        	<value>${database.jdbc.password}</value>-->
<!--        </property>-->
<!--        <property name="maxActive"> -->
<!--           <value>255</value> -->
<!--        </property> -->
<!--        <property name="maxIdle"> -->
<!--           <value>20</value> -->
<!--        </property> -->
<!--        <property name="maxWait"> -->
<!--           <value>10</value> -->
<!--        </property> -->
<!--		<property name="validationQuery">-->
<!--           <value>select count(1) from Dual</value>-->
<!--        </property>-->
<!--         Test when get connection -->
<!--        <property name="testOnBorrow">-->
<!--           <value>true</value>-->
<!--        </property>-->
<!--         Test when return connection to pool -->
<!--        <property name="testOnReturn">-->
<!--           <value>true</value>-->
<!--        </property>-->
<!--        <property name="testWhileIdle">-->
<!--           <value>true</value>-->
<!--        </property>-->
<!--    </bean>-->
<!-- 创建SqlSessionFactory，同时指定数据源   -->
<!--    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">    -->
<!--        <property name="dataSource">-->
<!--			<ref local="dataSource" />-->
<!--		</property>-->
<!--		<property name="configLocation">-->
<!--			<value>classpath:/com/framework/config/sqlMapConfig.xml</value>-->
<!--		</property>-->
<!--    </bean>-->
<!--    -->
<!--    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">    -->
<!--        <constructor-arg index="0" ref="sqlSessionFactory" />    -->
<!--    </bean> -->
<!--     事务 -->
<!--     <bean id="transactionManager"-->
<!--		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
<!--		<property name="dataSource" ref="dataSource" />-->
<!--	</bean>-->
<!---->
<!--	<tx:advice id="myAdvice" transaction-manager="transactionManager">-->
<!--		<tx:attributes>-->
<!--			<tx:method name="get*" read-only="true" />-->
<!--			<tx:method name="find*" read-only="true" />-->
<!--			<tx:method name="list*" read-only="true" />-->
<!--			<tx:method name="query*" read-only="true" />-->
<!--			<tx:method name="load*" read-only="true" />-->
<!--			<tx:method name="*" rollback-for="Throwable" />-->
<!--		</tx:attributes>-->
<!--	</tx:advice>-->
<!---->
<!--	<aop:config>-->
<!--		<aop:pointcut id="myPointcut"-->
<!--			expression="execution(* com.framework..service..*.*(..))" />-->
<!--		<aop:advisor pointcut-ref="myPointcut" advice-ref="myAdvice" />-->
<!--	</aop:config>-->
	<!-- 任务调度配置 -->
	<bean id="mySchedule" class="com.framework.base.quartz.MySchedule"></bean>

	<bean id="scheduleList"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="runBySeverStartTrigger" />
				<ref bean="runByMidnightTrigger" />
				<ref bean="runByHourTrigger" />
			</list>
		</property>
	</bean>
	<!-- 服务器启动后5秒后执行，只执行一次 -->
	<bean id="runBySeverStartTrigger"
		class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail">
			<bean
				class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
				<property name="targetObject" ref="mySchedule" />
				<property name="targetMethod" value="runBySeverStart" />
			</bean>
		</property>
		<property name="repeatCount">
			<value>0</value>
		</property>
	</bean>
	
	<!-- 每小时执行一次(每个钟点的第15分钟运行)-->
	<bean id="runByHourTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<bean
				class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
				<property name="targetObject" ref="mySchedule" />
				<property name="targetMethod" value="runByHour" />
			</bean>
		</property>
		<property name="cronExpression">
			<value>0 50 * * * ?</value>
		</property>
	</bean>
	
	<!-- 每天凌晨00:30执行一次-->
	<bean id="runByMidnightTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<bean
				class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
				<property name="targetObject" ref="mySchedule" />
				<property name="targetMethod" value="runByMidnight" />
			</bean>
		</property>
		<property name="cronExpression">
			<value>0 30 0 * * ?</value>
		</property>
	</bean>
	
	   
</beans>